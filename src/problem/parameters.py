import os

class Standard:
    holder = dict()
    ranges = []

    def setDiscretization(self, value, limit=None):
        self.fieldAdder("ho spatial discretization",value,limit)
    def setEigenvalueProblem(self, value, limit=None):
        self.fieldAdder("do eigenvalue calculations",value,limit)
    def setFEPolynomialDegree(self, value, limit=None):
        self.fieldAdder("finite element polynomial degree",value,limit)
    def setFirstThermalGroup(self, value, limit=None):
        self.fieldAdder("thermal group boundary",value,limit)
    def setHaveReflectiveBC(self, value, limit=None):
        self.fieldAdder("have reflective boundary",value,limit)
    def setNCells(self, value, limit=None):
        self.fieldAdder("number of cells for x, y, z directions",value,limit)
    def setNEnergyGroups(self, value, limit=None):
        self.fieldAdder("number of groups",value,limit)
    def setOutputFilenameBase(self, value, limit=str):
        self.fieldAdder("output file name base",value,limit)
    def setReflectiveBoundary(self, value, limit=None):
        self.fieldAdder("reflective boundary names",value,limit)
    def setSpatialDimension(self, value, limit=[1,2,3]):
        self.fieldAdder("problem dimension",value,limit)
    def setSpatialMax(self, value, limit=None):
        self.fieldAdder("x, y, z max values of boundary locations",value,limit)
    def setTransportModel(self, value, limit=None):
        self.fieldAdder("transport model",value,limit)

    # Mesh
    def setMeshGenerated(self, value, limit=None):
        self.fieldAdder("is mesh generated by deal.II",value,limit)
    def setMeshFilename(self, value, limit=None):
        self.fieldAdder("mesh file name",value,limit)
    def setUniformRefinements(self, value, limit=None):
        self.fieldAdder("uniform refinements",value,limit)
    def setFuelPinRadius(self, value, limit=None):
        self.fieldAdder("fuel Pin radius",value,limit)
    def setFuelPinTriangulation(self, value, limit=None):
        self.fieldAdder("triangulation type of fuel Pin",value,limit)
    def setMeshPinResolved(self, value, limit=None):
        self.fieldAdder("is mesh pin-resolved",value,limit)

    # Material Parameters
    def setMaterialSubsection(self, value, limit=None):
        self.fieldAdder("material ID map",value,limit)
    def setMaterialMapFilename(self, value, limit=None):
        self.fieldAdder("material id file name",value,limit)
    def setMaterialFilenames(self, value, limit=None):
        self.fieldAdder("material id file name map",value,limit)
    def setNumberOfMaterials(self, value, limit=None):
        self.fieldAdder("number of materials",value,limit)
    def setFuelPinMaterialMapFilename(self, value, limit=None):
        self.fieldAdder("fuel pin material id file name",value,limit)

    # Acceleration Parameters
    def setPreconditioner(self, value, limit=None):
        self.fieldAdder("ho preconditioner name",value,limit)
    def setBSSOR_Factor(self, value, limit=None):
        self.fieldAdder("ho ssor factor",value,limit)
    def setDoNDA(self, value, limit=None):
        self.fieldAdder("do nda",value,limit)
    def setNDA_Discretization(self, value, limit=None):
        self.fieldAdder("nda spatial discretization",value,limit)
    def setNDALinearSolver(self, value, limit=None):
        self.fieldAdder("nda linear solver name",value,limit)
    def setNDAPreconditioner(self, value, limit=None):
        self.fieldAdder("nda preconditioner name",value,limit)
    def setNDA_BSSOR_Factor(self, value, limit=None):
        self.fieldAdder("nda ssor factor",value,limit)

    # Solvers
    def setEigenSolver(self, value, limit=None):
        self.fieldAdder("eigen solver name",value,limit)
    def setInGroupSolver(self, value, limit=None):
        self.fieldAdder("in group solver name",value,limit)
    def setLinearSolver(self, value, limit=None):
        self.fieldAdder("ho linear solver name",value,limit)
    def setMultiGroupSolver(self, value, limit=None):
        self.fieldAdder("mg solver name",value,limit)

    # Angular Quadrature
    def setAngularQuad(self, value, limit=None):
        self.fieldAdder("angular quadrature name",value,limit)
    def setAngularQuadOrder(self, value, limit=None):
        self.fieldAdder("angular quadrature order",value,limit)


    def fieldAdder(self,field,value,limitations=None):
        if limitations:
            if type(limitations) is type and type(value) is not limitations:
                print("ERROR: " + str(value) + " is an invalid type of value for " + field + ".")
                return 
            elif type(limitations) is list and value not in limitations: 
                print("ERROR: " + str(value) + " is not an accepted value for " + field + ".")
                return
        if type(value) is list: # you input a range of values for one 
            self.ranges.append((field, value))
        else:
            self.holder[field] = value
    
    def snapshot(self):
        for i in self.holder:
             print(str(i) + " = " + str(self.holder[i]))
        print(str(self.ranges[0][0]) + " = " + str(self.ranges[0][1]))

    def saveAs(self, pathname): 
        temp = pathname.split("/")
        directories, filename = "/".join(temp[:-1])+"/", temp[-1]
        try:
            os.mkdir(directories)
        except FileExistsError:
            pass
        if len(self.ranges) > 0:
            if len(self.ranges) > 1:
                print("Errorâ€”only try inputting one range right now")
            else:
                print(self.ranges[0][1])
                for i in range(len(self.ranges[0][1])):
                    currFile = directories + filename+"-"+str(i)+".input"
                    print(currFile)
                    with open(currFile,"w") as file:
                        for j in self.holder:
                            file.write(j+ " = " + str(self.holder[j])+ "\n")


                        file.write(self.ranges[0][0] + " = " + str(self.ranges[0][1][i]) + "\n")
        else:
            with open(directories + filename+".input","w") as file:
                for i in self.holder:
                    file.write(i + " = " + str(self.holder[i]) + "\n")
        print("Files saved to " + pathname)